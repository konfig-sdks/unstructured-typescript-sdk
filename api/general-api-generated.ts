/* tslint:disable */
/* eslint-disable */
/*
Unstructured Pipeline API

At Unstructured, we're on a mission to give organizations access to all of their data. We know the world runs on documentsâ€”from research reports and memos, to quarterly filings and plans of action, documents are the unit of information that companies depend on. And yet, 80% of this information is trapped in inaccessible formats, and businesses have long struggled to unlock this data, leading to information silos, inefficient decision-making, and repetitive work. Until now.

Unstructured captures this unstructured data wherever it lives and transforms it into AI-friendly JSON files for companies who are eager to fold AI into their business.

The version of the OpenAPI document: 0.0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { PartitionParameters } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Pipeline 1
         * @param {Uint8Array | File | buffer.File} [files] The file to extract
         * @param {string} [strategy] The strategy to use for partitioning PDF/image. Options are fast, hi_res, auto. Default: auto
         * @param {string} [gzUncompressedContentType] If file is gzipped, use this content type after unzipping
         * @param {string} [outputFormat] The format of the response. Supported formats are application/json and text/csv. Default: application/json.
         * @param {boolean} [coordinates] If true, return coordinates for each element. Default: false
         * @param {string} [encoding] The encoding method used to decode the text input. Default: utf-8
         * @param {string} [hiResModelName] The name of the inference model used when strategy is hi_res
         * @param {boolean} [includePageBreaks] If True, the output will include page breaks if the filetype supports it. Default: false
         * @param {Array<string>} [languages] The languages present in the document, for use in partitioning and/or OCR
         * @param {boolean} [pdfInferTableStructure] If True and strategy&#x3D;hi_res, any Table Elements extracted from a PDF will include an additional metadata field, \\\&#39;text_as_html\\\&#39;, where the value (string) is a just a transformation of the data into an HTML &lt;table&gt;.
         * @param {Array<string>} [skipInferTableTypes] The document types that you want to skip table extraction with. Default: [\\\&#39;pdf\\\&#39;, \\\&#39;jpg\\\&#39;, \\\&#39;png\\\&#39;]
         * @param {boolean} [xmlKeepTags] If True, will retain the XML tags in the output. Otherwise it will simply extract the text from within the tags. Only applies to partition_xml.
         * @param {string} [chunkingStrategy] Use one of the supported strategies to chunk the returned elements. Currently supports: by_title
         * @param {boolean} [multipageSections] If chunking strategy is set, determines if sections can span multiple sections. Default: true
         * @param {number} [combineUnderNChars] If chunking strategy is set, combine elements until a section reaches a length of n chars. Default: 500
         * @param {number} [newAfterNChars] If chunking strategy is set, cut off new sections after reaching a length of n chars (soft max). Default: 1500
         * @param {number} [maxCharacters] If chunking strategy is set, cut off new sections after reaching a length of n chars (hard max). Default: 1500
         * @param {number} [overlap] A prefix of this many trailing characters from prior text-split chunk is applied to second and later chunks formed from oversized elements by text-splitting. Default: None
         * @param {boolean} [overlapAll] When True, overlap is also applied to \\\&#39;normal\\\&#39; chunks formed by combining whole elements. Use with caution as this can introduce noise into otherwise clean semantic units. Default: None
         * @param {Array<string>} [extractImageBlockTypes] The types of elements to extract, for use in extracting image blocks as base64 encoded data stored in metadata fields
         * @param {PartitionParameters} [partitionParameters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPipeline: async (files?: Uint8Array | File | buffer.File, strategy?: string, gzUncompressedContentType?: string, outputFormat?: string, coordinates?: boolean, encoding?: string, hiResModelName?: string, includePageBreaks?: boolean, languages?: Array<string>, pdfInferTableStructure?: boolean, skipInferTableTypes?: Array<string>, xmlKeepTags?: boolean, chunkingStrategy?: string, multipageSections?: boolean, combineUnderNChars?: number, newAfterNChars?: number, maxCharacters?: number, overlap?: number, overlapAll?: boolean, extractImageBlockTypes?: Array<string>, partitionParameters?: PartitionParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/general/v0/general`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "unstructured-api-key", keyParamName: "apiKeyAuth", configuration })

            if (files !== undefined) {
                await addFormParam('files', files, true, true)
            }
    
            if (strategy !== undefined) {
                await addFormParam('strategy', strategy, false, true)
            }
    
            if (gzUncompressedContentType !== undefined) {
                await addFormParam('gz_uncompressed_content_type', gzUncompressedContentType, false, true)
            }
    
            if (outputFormat !== undefined) {
                await addFormParam('output_format', outputFormat, false, true)
            }
    
            if (coordinates !== undefined) {
                await addFormParam('coordinates', coordinates, false, true)
            }
    
            if (encoding !== undefined) {
                await addFormParam('encoding', encoding, false, true)
            }
    
            if (hiResModelName !== undefined) {
                await addFormParam('hi_res_model_name', hiResModelName, false, true)
            }
    
            if (includePageBreaks !== undefined) {
                await addFormParam('include_page_breaks', includePageBreaks, false, true)
            }
            if (languages) {
            localVarFormParams.append('languages', languages.join(COLLECTION_FORMATS.csv));
            }

    
            if (pdfInferTableStructure !== undefined) {
                await addFormParam('pdf_infer_table_structure', pdfInferTableStructure, false, true)
            }
            if (skipInferTableTypes) {
            localVarFormParams.append('skip_infer_table_types', skipInferTableTypes.join(COLLECTION_FORMATS.csv));
            }

    
            if (xmlKeepTags !== undefined) {
                await addFormParam('xml_keep_tags', xmlKeepTags, false, true)
            }
    
            if (chunkingStrategy !== undefined) {
                await addFormParam('chunking_strategy', chunkingStrategy, false, true)
            }
    
            if (multipageSections !== undefined) {
                await addFormParam('multipage_sections', multipageSections, false, true)
            }
    
            if (combineUnderNChars !== undefined) {
                await addFormParam('combine_under_n_chars', combineUnderNChars, false, true)
            }
    
            if (newAfterNChars !== undefined) {
                await addFormParam('new_after_n_chars', newAfterNChars, false, true)
            }
    
            if (maxCharacters !== undefined) {
                await addFormParam('max_characters', maxCharacters, false, true)
            }
    
            if (overlap !== undefined) {
                await addFormParam('overlap', overlap, false, true)
            }
    
            if (overlapAll !== undefined) {
                await addFormParam('overlap_all', overlapAll, false, true)
            }
            if (extractImageBlockTypes) {
            localVarFormParams.append('extract_image_block_types', extractImageBlockTypes.join(COLLECTION_FORMATS.csv));
            }

    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: partitionParameters,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/general/v0/general',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Pipeline 1
         * @param {GeneralApiCreatePipelineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPipeline(requestParameters: GeneralApiCreatePipelineRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const partitionParameters: PartitionParameters = {
                files: requestParameters.files,
                strategy: requestParameters.strategy,
                gz_uncompressed_content_type: requestParameters.gz_uncompressed_content_type,
                output_format: requestParameters.output_format,
                coordinates: requestParameters.coordinates,
                encoding: requestParameters.encoding,
                hi_res_model_name: requestParameters.hi_res_model_name,
                include_page_breaks: requestParameters.include_page_breaks,
                languages: requestParameters.languages,
                pdf_infer_table_structure: requestParameters.pdf_infer_table_structure,
                skip_infer_table_types: requestParameters.skip_infer_table_types,
                xml_keep_tags: requestParameters.xml_keep_tags,
                chunking_strategy: requestParameters.chunking_strategy,
                multipage_sections: requestParameters.multipage_sections,
                combine_under_n_chars: requestParameters.combine_under_n_chars,
                new_after_n_chars: requestParameters.new_after_n_chars,
                max_characters: requestParameters.max_characters,
                overlap: requestParameters.overlap,
                overlap_all: requestParameters.overlap_all,
                extract_image_block_types: requestParameters.extract_image_block_types
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPipeline(requestParameters.files, requestParameters.strategy, requestParameters.gzUncompressedContentType, requestParameters.outputFormat, requestParameters.coordinates, requestParameters.encoding, requestParameters.hiResModelName, requestParameters.includePageBreaks, requestParameters.languages, requestParameters.pdfInferTableStructure, requestParameters.skipInferTableTypes, requestParameters.xmlKeepTags, requestParameters.chunkingStrategy, requestParameters.multipageSections, requestParameters.combineUnderNChars, requestParameters.newAfterNChars, requestParameters.maxCharacters, requestParameters.overlap, requestParameters.overlapAll, requestParameters.extractImageBlockTypes, partitionParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralApiFp(configuration)
    return {
        /**
         * 
         * @summary Pipeline 1
         * @param {GeneralApiCreatePipelineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPipeline(requestParameters: GeneralApiCreatePipelineRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.createPipeline(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPipeline operation in GeneralApi.
 * @export
 * @interface GeneralApiCreatePipelineRequest
 */
export type GeneralApiCreatePipelineRequest = {
    
    /**
    * The file to extract
    * @type {Uint8Array | File | buffer.File}
    * @memberof GeneralApiCreatePipeline
    */
    readonly files?: Uint8Array | File | buffer.File
    
    /**
    * The strategy to use for partitioning PDF/image. Options are fast, hi_res, auto. Default: auto
    * @type {string}
    * @memberof GeneralApiCreatePipeline
    */
    readonly strategy?: string
    
    /**
    * If file is gzipped, use this content type after unzipping
    * @type {string}
    * @memberof GeneralApiCreatePipeline
    */
    readonly gzUncompressedContentType?: string
    
    /**
    * The format of the response. Supported formats are application/json and text/csv. Default: application/json.
    * @type {string}
    * @memberof GeneralApiCreatePipeline
    */
    readonly outputFormat?: string
    
    /**
    * If true, return coordinates for each element. Default: false
    * @type {boolean}
    * @memberof GeneralApiCreatePipeline
    */
    readonly coordinates?: boolean
    
    /**
    * The encoding method used to decode the text input. Default: utf-8
    * @type {string}
    * @memberof GeneralApiCreatePipeline
    */
    readonly encoding?: string
    
    /**
    * The name of the inference model used when strategy is hi_res
    * @type {string}
    * @memberof GeneralApiCreatePipeline
    */
    readonly hiResModelName?: string
    
    /**
    * If True, the output will include page breaks if the filetype supports it. Default: false
    * @type {boolean}
    * @memberof GeneralApiCreatePipeline
    */
    readonly includePageBreaks?: boolean
    
    /**
    * The languages present in the document, for use in partitioning and/or OCR
    * @type {Array<string>}
    * @memberof GeneralApiCreatePipeline
    */
    readonly languages?: Array<string>
    
    /**
    * If True and strategy=hi_res, any Table Elements extracted from a PDF will include an additional metadata field, \\\'text_as_html\\\', where the value (string) is a just a transformation of the data into an HTML <table>.
    * @type {boolean}
    * @memberof GeneralApiCreatePipeline
    */
    readonly pdfInferTableStructure?: boolean
    
    /**
    * The document types that you want to skip table extraction with. Default: [\\\'pdf\\\', \\\'jpg\\\', \\\'png\\\']
    * @type {Array<string>}
    * @memberof GeneralApiCreatePipeline
    */
    readonly skipInferTableTypes?: Array<string>
    
    /**
    * If True, will retain the XML tags in the output. Otherwise it will simply extract the text from within the tags. Only applies to partition_xml.
    * @type {boolean}
    * @memberof GeneralApiCreatePipeline
    */
    readonly xmlKeepTags?: boolean
    
    /**
    * Use one of the supported strategies to chunk the returned elements. Currently supports: by_title
    * @type {string}
    * @memberof GeneralApiCreatePipeline
    */
    readonly chunkingStrategy?: string
    
    /**
    * If chunking strategy is set, determines if sections can span multiple sections. Default: true
    * @type {boolean}
    * @memberof GeneralApiCreatePipeline
    */
    readonly multipageSections?: boolean
    
    /**
    * If chunking strategy is set, combine elements until a section reaches a length of n chars. Default: 500
    * @type {number}
    * @memberof GeneralApiCreatePipeline
    */
    readonly combineUnderNChars?: number
    
    /**
    * If chunking strategy is set, cut off new sections after reaching a length of n chars (soft max). Default: 1500
    * @type {number}
    * @memberof GeneralApiCreatePipeline
    */
    readonly newAfterNChars?: number
    
    /**
    * If chunking strategy is set, cut off new sections after reaching a length of n chars (hard max). Default: 1500
    * @type {number}
    * @memberof GeneralApiCreatePipeline
    */
    readonly maxCharacters?: number
    
    /**
    * A prefix of this many trailing characters from prior text-split chunk is applied to second and later chunks formed from oversized elements by text-splitting. Default: None
    * @type {number}
    * @memberof GeneralApiCreatePipeline
    */
    readonly overlap?: number
    
    /**
    * When True, overlap is also applied to \\\'normal\\\' chunks formed by combining whole elements. Use with caution as this can introduce noise into otherwise clean semantic units. Default: None
    * @type {boolean}
    * @memberof GeneralApiCreatePipeline
    */
    readonly overlapAll?: boolean
    
    /**
    * The types of elements to extract, for use in extracting image blocks as base64 encoded data stored in metadata fields
    * @type {Array<string>}
    * @memberof GeneralApiCreatePipeline
    */
    readonly extractImageBlockTypes?: Array<string>
    
} & PartitionParameters

/**
 * GeneralApiGenerated - object-oriented interface
 * @export
 * @class GeneralApiGenerated
 * @extends {BaseAPI}
 */
export class GeneralApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Pipeline 1
     * @param {GeneralApiCreatePipelineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApiGenerated
     */
    public createPipeline(requestParameters: GeneralApiCreatePipelineRequest = {}, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).createPipeline(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
